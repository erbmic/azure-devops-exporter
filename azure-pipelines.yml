# # Docker image and Azure Container Registry
# # Build a Docker image and push it to an Azure Container Registry.
# # https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - main
# - feature/*
# - fix/*
# - test/*

# resources:
# - repo: self

# variables:
#   # ========================================================================
#   #                          Mandatory variables
#   # ========================================================================

#  # Update Azure.ResourceGroupName value with Azure resource group name.
#   Azure.ResourceGroupName: '{{#toAlphaNumericString repositoryName 50}}{{/toAlphaNumericString}}'

#   # Update Azure.ServiceConnectionId value with AzureRm service endpoint.
#   Azure.ServiceConnectionId: '{{ azureServiceConnectionId }}'

#   # Update Azure.Location value with Azure Location.
#   Azure.Location: 'eastus'

#   # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
#   ACR.Name: '{{#toAlphaNumericString repositoryName 46}}{{/toAlphaNumericString}}{{#shortGuid}}{{/shortGuid}}'

#   # ========================================================================
#   #                           Optional variables
#   # ========================================================================

#   ACR.ImageName: '$(ACR.Name):$(Build.BuildId)'
#   ACR.FullName: '$(ACR.Name).azurecr.io'
#   Azure.CreateResources: 'true' # Update Azure.CreateResources to false if you have already created resources like resource group and azure container registry.
#   System.Debug: 'false'

# jobs:

# - job: CreateResources
#   displayName: Create required resources
#   condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))

#   pool:
#     {{ pool }}

#   steps:
#   - task: AzureResourceGroupDeployment@2
#     displayName: 'Azure Deployment:Create Azure Container Registry'
#     inputs:
#       azureSubscription: '$(Azure.ServiceConnectionId)'
#       resourceGroupName: '$(Azure.ResourceGroupName)'
#       location: '$(Azure.Location)'
#       templateLocation: 'URL of the file'
#       csmFileLink: 'https://raw.githubusercontent.com/Microsoft/azure-pipelines-yaml/master/templates/resources/arm/acr.json'
#       overrideParameters: '-registryName "$(ACR.Name)" -registryLocation "$(Azure.Location)"'

# - job: BuildImage
#   displayName: Build
#   dependsOn: CreateResources
#   condition: or(succeeded(), ne(variables['Azure.CreateResources'], 'true'))

#   pool:
#     {{ pool }}

#   steps:
#   - task: Docker@1
#     displayName: 'Build an image'
#     inputs:
#       azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
#       azureContainerRegistry: '$(ACR.FullName)'
#       imageName: '$(ACR.ImageName)'
#       command: build
#       dockerFile: '**/Dockerfile'

#   - task: Docker@1
#     displayName: 'Push an image'
#     inputs:
#       azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
#       azureContainerRegistry: '$(ACR.FullName)'
#       imageName: '$(ACR.ImageName)'
#       command: push


# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
- feature/*
- fix/*
- test/*

resources:
- repo: self

variables:
- name: testerx
  value: azure-devops-exporter
- name: version
  value: 1.0.0
- name: onMain
  value: $[eq(variables['Build.SourceBranch'], 'main')]
- name: onRelease
  value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]
- name: dockerReleaseRegistryName
  value: michaelerb
- name: tag
  value: '$(Build.BuildId)'
- group: docker_hub_credentials

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
    - bash: |
        # determine tag
        tag=$(version)"-"$(Build.BuildNumber)
        registryHost=$(dockerReleaseRegistryName)

        # build
        imageName=$registryHost"/"azure-devops-exporter":"$tag
        echo $imageName
        docker build --no-cache -t $imageName .

        # push
        if [ $(onRelease) = True ] || [ $(onMain) = True ] ; then
        echo $(dh_credentials.password) | docker login $registryHost --username $(dh_credentials.username) --password-stdin
        docker push $imageName
        docker logout $registryHost
        fi

        # clean up
        docker rmi $imageName


